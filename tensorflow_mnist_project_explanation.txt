
# TensorFlow MNIST Digit Classifier Project

## üìå Project Overview

This project is a **handwritten digit classifier** using the **MNIST dataset** and built with **TensorFlow**, a powerful deep learning framework. It uses a **Convolutional Neural Network (CNN)** to identify digits from 0 to 9 based on 28x28 pixel grayscale images.

---

## üß† Technologies Used

- Python
- TensorFlow
- Keras
- NumPy
- Matplotlib
- Visual Studio Code (IDE)

---

## üìÅ Files Included

- `main.py` ‚Üí Python code that builds, trains, and evaluates the model.
- `project_explanation.txt` ‚Üí This file! Contains full explanation of the project.
- (Optional) `requirements.txt` ‚Üí To install required libraries.

---

## ‚öôÔ∏è How the Project Works

### 1. **Import Libraries**
The following libraries are used:
```python
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
import numpy as np
```

---

### 2. **Load and Preprocess the Data**
```python
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(-1, 28, 28, 1).astype('float32') / 255.0
x_test = x_test.reshape(-1, 28, 28, 1).astype('float32') / 255.0

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)
```

- The data is normalized from 0‚Äì255 to 0‚Äì1
- Labels are one-hot encoded for classification

---

### 3. **Build the CNN Model**
```python
model = Sequential([
    Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(pool_size=(2,2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])
```

---

### 4. **Compile and Train the Model**
```python
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5, batch_size=128, validation_split=0.1)
```

- `adam` optimizer helps improve training efficiency
- Trains the model for 5 epochs

---

### 5. **Evaluate the Model**
```python
test_loss, test_acc = model.evaluate(x_test, y_test)
print("Test Accuracy:", test_acc)
```

---

### 6. **Make a Prediction**
```python
sample = x_test[0]
sample_input = np.expand_dims(sample, axis=0)
prediction = model.predict(sample_input)
predicted_label = np.argmax(prediction)

plt.imshow(sample.reshape(28,28), cmap='gray')
plt.title(f"Predicted Label: {predicted_label}")
plt.show()
```

---

## üñºÔ∏è Output Example

The output is a window showing the digit image and its predicted label:

```
Predicted Label: 7
```

This means the model has correctly identified the digit in the image.

---

## ‚úÖ Final Notes

- The project **successfully runs and predicts digits**.
- You can save the model or use it in real-world apps.
- Ideal for learning **machine learning, image processing, and neural networks**.

---

## üì¶ Requirements

Install dependencies using this command:
```bash
pip install tensorflow matplotlib numpy
```
